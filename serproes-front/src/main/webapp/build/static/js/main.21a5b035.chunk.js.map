{"version":3,"sources":["components/Map.js","components/LateralPanel.js","components/MainContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Map","selectedSpecies","displayedTiles","selectedSpeciesChangeHandler","displayedSpeciesChangeHandler","useState","webmap","setWebmap","mapDiv","useRef","useEffect","loadModules","then","WebMap","MapView","GraphicsLayer","Search","portalItem","id","portal","url","infoWindow","graphicsLayer","graphics","add","view","container","current","map","zoom","search","ui","on","event","findLayerById","removeAll","mallas","hitTest","response","screenPoint","layer","point","toMap","queryFeatures","geometry","spatialRelationship","returnGeometry","outFields","featureSet","gra","tileData","features","attributes","polygon","symbol","type","color","species","catch","error","console","log","allSublayers","items","speciesGraphics","tile","graphic","ref","LateralPanel","displayedTilesChangeHandler","selectedButton","setSelectedButton","setSpecies","getButtonColor","axios","method","baseURL","headers","window","sessionStorage","getItem","data","slice","item","style","margin","espCodi","espTaxon","EyeOutlined","onClick","specieId","regCodcua","cuaCodq5","Title","Typography","MainContainer","logoutHandler","username","setSelectedSpecies","setDisplayedTiles","Object","keys","speciesData","setDisplayedSpecies","className","span","alignSelf","fontSize","borderRadius","backgroundColor","border","level","tilesArray","speciesArray","App","keycloak","setKeycloak","authenticated","setAuthenticated","Keycloak","process","init","onLoad","checkLoginIframe","realmAccess","roles","includes","setItem","token","err","alert","logout","idTokenParsed","preferred_username","status","title","extra","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21a5b035.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { loadModules } from 'esri-loader';\r\n// import { esriVersion } from \"../config\";\r\nimport tileData from \"../data/dummyTileData.json\";\r\n\r\n// // configure esri-loader to use version 3.31 from the ArcGIS CDN\r\n// // NOTE: make sure this is called once before any calls to loadModules()\r\n// setDefaultOptions({\r\n//   version: esriVersion,\r\n//   css: true,\r\n// });\r\n\r\n// TODO ask to SITIBSA if the webmap can be configured without info windows\r\n// TODO check with SITIBSA why the CADSATRO layer don't loads (a CORS error message is thrown)\r\n\r\nconst Map = ({\r\n  selectedSpecies,\r\n  displayedTiles,\r\n  selectedSpeciesChangeHandler,\r\n  displayedSpeciesChangeHandler,\r\n}) => {\r\n  // the webmap with an empty graphics layer is initialized in a first useEffect, then saved in the state.\r\n  // this way it will be available for later manipulations/updates on that graphic layer.\r\n  const [webmap, setWebmap] = useState(null);\r\n\r\n  // A reference for the div where the map will be injected\r\n  const mapDiv = useRef(null);\r\n\r\n  useEffect(() => {\r\n    loadModules(['esri/WebMap', 'esri/views/MapView', 'esri/layers/GraphicsLayer', 'esri/widgets/Search'])\r\n    .then(([WebMap, MapView, GraphicsLayer, Search]) => {\r\n      // Initialize webmap. It has been preconfigured by SITIBSA and made available throught the CAIB maps web portal\r\n      const webmap = new WebMap({\r\n        portalItem: {\r\n          id: \"884dd1c129b84c72a1db164c4fb85095\",\r\n          portal: {\r\n            url: \"https://portalideib.caib.es/portal\",\r\n          },\r\n        },\r\n      });\r\n\r\n      // remove default info window (which is predefined in the webmap delivered)\r\n      webmap.infoWindow = null;\r\n\r\n      // ################# INITIALIZE GRAPHICS LAYER ##############\r\n      // it must exist for later interaction\r\n      // an id is provided to get it using the method findLayerById on manipulations\r\n      var graphicsLayer = new GraphicsLayer({\r\n        id: \"bioatles-graphics\",\r\n        graphics: null,\r\n      });\r\n\r\n      webmap.add(graphicsLayer);\r\n\r\n      setWebmap(webmap);\r\n      \r\n      const view = new MapView({\r\n        // container: \"mapContainer\",\r\n        container: mapDiv.current,\r\n        map: webmap,\r\n        zoom: 2,\r\n      });\r\n      // ########## SEARCH WIDGET ##############\r\n      // Add a pre-built search widget. Locations and even addresses can be found using it.\r\n      const search = new Search({ view });\r\n      view.ui.add(search, \"top-right\");\r\n      // ########## ON CLICK EVENT HANDLER ##############\r\n      // It will get the clicked tile number and use that information to draw a rectangle representing its area\r\n      view.on(\"click\", function (event) {\r\n        // reset the graphics layer removing all tiles previously drawn\r\n        webmap.findLayerById(\"bioatles-graphics\").removeAll();\r\n\r\n        // get the layer that contains the features (we look for tile numbers)\r\n        // it contains two sublayers in a list 0 --> 1x1 and 1 --> 5 x 5\r\n        const mallas = webmap.findLayerById(\"GOIB_DistEspecies_IB_9660\");\r\n\r\n        function queryFeatures(screenPoint, layer) {\r\n          /* This function makes a query to the 5x5 feature layer.\r\n          Uses a screen point (coordinates) retrieved via click. It is intersected with the features to know\r\n          which one is found at that point.\r\n          The attributes of this feature contain the information required (The grid tile number)*/\r\n          const point = view.toMap(screenPoint);\r\n          layer\r\n            .queryFeatures({\r\n              geometry: point,\r\n              spatialRelationship: \"intersects\",\r\n              returnGeometry: false,\r\n              outFields: [\"*\"],\r\n            })\r\n            .then((featureSet) => {\r\n              // ############ ADD GRAPHICS IN RESPONSE TO A MAP CLICK ###########\r\n              // Draw the clicked tile adding graphics to the already existing graphicsLayer (\"bioatles-graphics\")\r\n              var gra = {};\r\n              gra.geometry =\r\n                tileData[featureSet.features[0].attributes[\"Q_CODI\"]].polygon;\r\n              gra.symbol = {\r\n                type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\r\n                color: \"blue\",\r\n              };\r\n\r\n              webmap.findLayerById(\"bioatles-graphics\").add(gra);\r\n\r\n              // ########### UPDATE PARENT (mainContainer) STATE #########\r\n              // this state update prevents conflicts with previously applied filters.\r\n              selectedSpeciesChangeHandler(null);\r\n\r\n              // this tells the lateralPanel (via props) which species should be listed (those present at that tile)\r\n              displayedSpeciesChangeHandler(\r\n                tileData[featureSet.features[0].attributes[\"Q_CODI\"]].species\r\n              );\r\n            })\r\n            .catch((error) => console.log(\"Query error\", error));\r\n        }\r\n        // hitTests of the Javascript ArcGis API are used to determine the topmost feature of the layers\r\n        // intersecting teh provided coordinates\r\n        view.hitTest(event).then(function (response) {\r\n          // check if a feature is returned\r\n          if (response.screenPoint) {\r\n            queryFeatures(response.screenPoint, mallas.allSublayers.items[1]);\r\n          }\r\n        });\r\n      });\r\n    \r\n    }\r\n  )}, []);\r\n\r\n  // useEffect(() => {\r\n  //   // Add a view once the webmap exists\r\n  //   // It defines the div that will contain the map, the zoom level and if desired the extent (the map area that will be shown)\r\n  //   // event handlers (i.e. onClick interactions) and widgets (i.e. a search widget)\r\n  //   loadModules(['esri/WebMap', 'esri/views/MapView', 'esri/layers/GraphicsLayer', 'esri/widgets/Search'])\r\n  //   .then(([WebMap, MapView, GraphicsLayer, Search]) => {\r\n  //     if (webmap) {\r\n  //       const view = new MapView({\r\n  //         container: mapDiv.current,\r\n  //         map: webmap,\r\n  //         zoom: 2,\r\n  //       });\r\n\r\n  //       // ########## SEARCH WIDGET ##############\r\n  //       // Add a pre-built search widget. Locations and even addresses can be found using it.\r\n  //       const search = new Search({ view });\r\n  //       view.ui.add(search, \"top-right\");\r\n\r\n  //       // ########## ON CLICK EVENT HANDLER ##############\r\n  //       // It will get the clicked tile number and use that information to draw a rectangle representing its area\r\n  //       view.on(\"click\", function (event) {\r\n  //         // reset the graphics layer removing all tiles previously drawn\r\n  //         webmap.findLayerById(\"bioatles-graphics\").removeAll();\r\n\r\n  //         // get the layer that contains the features (we look for tile numbers)\r\n  //         // it contains two sublayers in a list 0 --> 1x1 and 1 --> 5 x 5\r\n  //         const mallas = webmap.findLayerById(\"GOIB_DistEspecies_IB_9660\");\r\n\r\n  //         function queryFeatures(screenPoint, layer) {\r\n  //           /* This function makes a query to the 5x5 feature layer.\r\n  //           Uses a screen point (coordinates) retrieved via click. It is intersected with the features to know\r\n  //           which one is found at that point.\r\n  //           The attributes of this feature contain the information required (The grid tile number)*/\r\n  //           const point = view.toMap(screenPoint);\r\n  //           layer\r\n  //             .queryFeatures({\r\n  //               geometry: point,\r\n  //               spatialRelationship: \"intersects\",\r\n  //               returnGeometry: false,\r\n  //               outFields: [\"*\"],\r\n  //             })\r\n  //             .then((featureSet) => {\r\n  //               // ############ ADD GRAPHICS IN RESPONSE TO A MAP CLICK ###########\r\n  //               // Draw the clicked tile adding graphics to the already existing graphicsLayer (\"bioatles-graphics\")\r\n  //               var gra = {};\r\n  //               gra.geometry =\r\n  //                 tileData[featureSet.features[0].attributes[\"Q_CODI\"]].polygon;\r\n  //               gra.symbol = {\r\n  //                 type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\r\n  //                 color: \"blue\",\r\n  //               };\r\n\r\n  //               webmap.findLayerById(\"bioatles-graphics\").add(gra);\r\n\r\n  //               // ########### UPDATE PARENT (mainContainer) STATE #########\r\n  //               // this state update prevents conflicts with previously applied filters.\r\n  //               selectedSpeciesChangeHandler(null);\r\n\r\n  //               // this tells the lateralPanel (via props) which species should be listed (those present at that tile)\r\n  //               displayedSpeciesChangeHandler(\r\n  //                 tileData[featureSet.features[0].attributes[\"Q_CODI\"]].species\r\n  //               );\r\n  //             })\r\n  //             .catch((error) => console.log(\"Query error\", error));\r\n  //         }\r\n\r\n  //         // hitTests of the Javascript ArcGis API are used to determine the topmost feature of the layers\r\n  //         // intersecting teh provided coordinates\r\n  //         view.hitTest(event).then(function (response) {\r\n  //           // check if a feature is returned\r\n  //           if (response.screenPoint) {\r\n  //             queryFeatures(response.screenPoint, mallas.allSublayers.items[1]);\r\n  //           }\r\n  //         });\r\n  //       });\r\n  //     }\r\n  //   }\r\n  // )}, [webmap]);\r\n\r\n  // ############ ADD GRAPHICS IN RESPONSE TO A CHANGE IN THE SELECTED SPECIES ###########\r\n  // Update when the selectedSpecies prop changes\r\n  // This happens when the selectedSpecies state changes in the mainContainer because a species was selected in the lateralPanel\r\n  // the webmap and view are not rerendered because they are not dependencies of the corresponding useEffects that creates them.\r\n  if (webmap) {\r\n    const speciesGraphics =\r\n        displayedTiles\r\n        ? displayedTiles.map((tile) => (\r\n          {\r\n            geometry: tile in tileData ? tileData[tile].polygon : null,\r\n            symbol: {\r\n              type: \"simple-fill\",\r\n              color: \"#039962\",\r\n            },\r\n          }))\r\n        : null;\r\n\r\n    if (speciesGraphics) {\r\n      webmap.findLayerById(\"bioatles-graphics\").removeAll();\r\n      speciesGraphics.map((graphic) =>\r\n        webmap.findLayerById(\"bioatles-graphics\").add(graphic)\r\n      );\r\n    }\r\n  }\r\n\r\n  // ###### COMPONENT RENDERING (JSX)  #####\r\n  return <div id=\"mapDiv\" ref={mapDiv}></div>;\r\n  // return <main id='mapContainer' />\r\n\r\n};\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { EyeOutlined } from \"@ant-design/icons\";\r\nimport axios from 'axios';\r\n\r\nconst LateralPanel = ({ selectedSpeciesChangeHandler, displayedTilesChangeHandler }) => {\r\n  const [selectedButton, setSelectedButton] = useState(null);\r\n  const [species, setSpecies] = useState(null);\r\n\r\n  const getButtonColor = (species) => {\r\n    /*Changes the button color when a species is clicked.*/\r\n    if (selectedButton === species) {\r\n      return \"#039962\";\r\n    } else return \"inherit\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchSpecies = () => {\r\n      axios({\r\n        method: \"get\",\r\n        baseURL: \"http://127.0.0.1:8080/\",\r\n        // url: \"serproes/api/services/regist/findRegistByEspeci/6986\",\r\n        url: \"serproes/api/services/especi/list\",\r\n        headers:       \r\n        { \r\n          'Authorization': ' Bearer ' + window.sessionStorage.getItem(\"token\"),\r\n        },\r\n      })\r\n        .then((response) => {\r\n          setSpecies(response.data.slice(0, 30));\r\n          // console.log(\r\n          //   \"Response: \", response.data.slice(0, 30)\r\n          // );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"REST API error: \", error);\r\n        });\r\n    }\r\n    fetchSpecies();\r\n    return () => null;\r\n  }, []);\r\n\r\n  const fetchRegistries = (specieId) => {\r\n    axios({\r\n      method: \"get\",\r\n      baseURL: \"http://127.0.0.1:8080/\",\r\n      url: `serproes/api/services/regist/findRegistByEspeci/${specieId}`,\r\n      headers:       \r\n      { \r\n        'Authorization': ' Bearer ' + window.sessionStorage.getItem(\"token\"),\r\n      },\r\n    })\r\n      .then((response) => {\r\n        displayedTilesChangeHandler(response.data.map( item => item.regCodcua.cuaCodq5));\r\n        console.log(\r\n          \"Response: \", response.data.map( item => item.regCodcua.cuaCodq5)\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"REST API error: \", error);\r\n      });\r\n  }\r\n\r\n  // ###### COMPONENT RENDERING (JSX)  #####\r\n  return (\r\n    <div>\r\n      {species &&\r\n        species.map((item) => (\r\n          <div\r\n            key={item.espTaxon}\r\n            style={{ margin: 5, color: getButtonColor(item.espCodi) }}\r\n          >\r\n            {item.espTaxon}\r\n            <EyeOutlined\r\n              style={{ margin: 5 }}\r\n              onClick={() => {\r\n                fetchRegistries(item.espCodi);\r\n                setSelectedButton(item.espCodi);\r\n                selectedSpeciesChangeHandler(item.espCodi);\r\n              }}\r\n            ></EyeOutlined>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LateralPanel;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Row, Col } from \"antd\";\r\nimport { Typography } from \"antd\";\r\n\r\nimport Map from \"./Map\";\r\nimport LateralPanel from \"./LateralPanel\";\r\n\r\nimport speciesData from \"../data/dummySpeciesData.json\";\r\n\r\nimport \"./MainContainer.css\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst MainContainer = ( {logoutHandler, username} ) => {\r\n  // ###### STATES AND HANDLERS  #####\r\n  const [selectedSpecies, setSelectedSpecies] = useState(null);\r\n  const [displayedTiles, setDisplayedTiles] = useState(null);\r\n  const [displayedSpecies, setDisplayedSpecies] = useState(\r\n    Object.keys(speciesData)\r\n  );\r\n\r\n  // Handlers are passed to child components.\r\n  // Child comps will be able to update the state of the MainContainer (parent) when some actions are triggered withim them.\r\n  const selectedSpeciesChangeHandler = (species) => {\r\n    setSelectedSpecies(species);\r\n  };\r\n\r\n  const displayedSpeciesChangeHandler = (speciesArray) => {\r\n    setDisplayedSpecies(speciesArray);\r\n  };\r\n\r\n  const displayedTilesChangeHandler = (tilesArray) => {\r\n    setDisplayedTiles(tilesArray);\r\n  };\r\n\r\n  // ###### COMPONENT RENDERING (JSX)  #####\r\n  return (\r\n    <>\r\n      <Row className=\"header\">\r\n        <Col span={20}>\r\n          <Title className=\"header-title\">Bioatles</Title>\r\n        </Col>\r\n        <Col span={2} style={{alignSelf: \"center\"}}>\r\n          <div><b>Benvingut <span style={{color: \"#039962\", fontSize: 20}}>{username}</span> </b></div>\r\n        </Col>\r\n        <Col span={2} style={{alignSelf: \"center\"}}>\r\n          <button className=\"w3-btn w3-red\" style={{ borderRadius: 8, color: \"white\", backgroundColor: \"#A63A04\", border: \"none\", fontSize: 20 }} onClick={ () => logoutHandler() }>Logout</button>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span={6} className=\"left-col\">\r\n          <Title level={3} className=\"left-col-title\">\r\n            Espècies\r\n          </Title>\r\n          <LateralPanel\r\n            // displayedSpecies={displayedSpecies}\r\n            selectedSpeciesChangeHandler={selectedSpeciesChangeHandler}\r\n            displayedTilesChangeHandler={displayedTilesChangeHandler}\r\n          ></LateralPanel>\r\n        </Col>\r\n        <Col span={18}>\r\n          <Map\r\n            selectedSpecies={selectedSpecies}\r\n            displayedTiles={displayedTiles}\r\n            selectedSpeciesChangeHandler={selectedSpeciesChangeHandler}\r\n            displayedSpeciesChangeHandler={displayedSpeciesChangeHandler}\r\n          ></Map>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Keycloak from 'keycloak-js';\r\n\r\nimport { Result, Button } from 'antd';\r\n\r\nimport MainContainer from './components/MainContainer';\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n\r\n  // ###### STATES AND HANDLERS  #####\r\n  const [keycloak, setKeycloak] = useState(null);\r\n  const [authenticated, setAuthenticated] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    const keycloak = Keycloak(process.env.REACT_APP_ROUTER_BASE + \"/keycloak.json\");\r\n    keycloak.init({ onLoad: 'login-required', checkLoginIframe: false }).then(authenticated => {\r\n      setKeycloak(keycloak);\r\n      if (keycloak.realmAccess.roles.includes(\"SER_ADMIN\")) {\r\n        setAuthenticated(authenticated);\r\n        console.log(\"username: \" + keycloak.realmAccess.roles);\r\n        // console.log(\"keycloak: \" + JSON.stringify(keycloak));\r\n        window.sessionStorage.setItem(\"token\", keycloak.token);\r\n      }\r\n    }).catch(err => {\r\n      alert(\"Error initializing KEYCLOAK \" + err);\r\n    });\r\n    return () => null;\r\n  }, []);\r\n\r\n  const decodeJWT = (token) => {\r\n    var base64Url = token.split('.')[1];\r\n    var base64 = base64Url.replace('-', '+').replace('_', '/');\r\n    return JSON.stringify(JSON.parse(window.atob(base64)), null, 4);\r\n  }\r\n\r\n  const logoutHandler = () => {\r\n      keycloak.logout();\r\n    }\r\n\r\n  return (\r\n    <>\r\n      { authenticated && keycloak?\r\n        <MainContainer logoutHandler={logoutHandler} username={keycloak.idTokenParsed.preferred_username}></MainContainer>\r\n      :\r\n      <Result\r\n        status=\"warning\"\r\n        title=\"No s'ha pogut autenticar. Vosté no té privilegis per  accedir a l'admin de BIOATLES.\"\r\n        extra={\r\n          <Button type=\"primary\" onClick={logoutHandler}>\r\n            Tornar a formulari d'autenticació\r\n          </Button>\r\n        }\r\n      />\r\n      } \r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}